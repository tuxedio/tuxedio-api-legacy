require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe V1::ExperiencesController do

  let(:user) { create :user }
  let(:vendor) { create :vendor }

  before do
    user.confirm!
    sign_in user
  end

  describe "GET index" do
    it "assigns all v1_experiences as @v1_experiences" do
      experience = create :experience
      get :index, {}
      assigns(:v1_experiences).should eq([experience])
    end
  end

  describe "GET show" do
    it "assigns the requested v1_experience as @v1_experience" do
      experience = create :experience
      get :show, {:id => experience.to_param}
      assigns(:v1_experience).should eq(experience)
    end
  end

  describe "GET new" do
    it "assigns a new v1_experience as @v1_experience" do
      get :new, {}
      assigns(:v1_experience).should be_a_new(V1::Experience)
    end
  end

  describe "GET edit" do
    it "assigns the requested v1_experience as @v1_experience" do
      experience = create :experience
      get :edit, {:id => experience.to_param}
      assigns(:v1_experience).should eq(experience)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new V1::Experience" do
        binding.pry
        expect {
          post :create, v1_experience: attributes_for(:experience, vendor_id: vendor.id)
        }.to change(V1::Experience, :count).by(1)
      end

      it "assigns a newly created v1_experience as @v1_experience" do
        post :create, {:v1_experience => valid_attributes}
        assigns(:v1_experience).should be_a(V1::Experience)
        assigns(:v1_experience).should be_persisted
      end

      it "redirects to the created v1_experience" do
        post :create, {:v1_experience => valid_attributes}
        response.should redirect_to(V1::Experience.last)
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved v1_experience as @v1_experience" do
        # Trigger the behavior that occurs when invalid params are submitted
        V1::Experience.any_instance.stub(:save).and_return(false)
        post :create, {:v1_experience => {  }}
        assigns(:v1_experience).should be_a_new(V1::Experience)
      end

      it "re-renders the 'new' template" do
        # Trigger the behavior that occurs when invalid params are submitted
        V1::Experience.any_instance.stub(:save).and_return(false)
        post :create, {:v1_experience => {  }}
        response.should render_template("new")
      end
    end
  end

  describe "PUT update" do
    describe "with valid params" do
      it "updates the requested v1_experience" do
        experience = create :experience
        # Assuming there are no other v1_experiences in the database, this
        # specifies that the V1::Experience created on the previous line
        # receives the :update_attributes message with whatever params are
        # submitted in the request.
        V1::Experience.any_instance.should_receive(:update).with({ "these" => "params" })
        put :update, {:id => experience.to_param, :v1_experience => { "these" => "params" }}
      end

      it "assigns the requested v1_experience as @v1_experience" do
        experience = create :experience
        put :update, {:id => experience.to_param, :v1_experience => valid_attributes}
        assigns(:v1_experience).should eq(experience)
      end

      it "redirects to the v1_experience" do
        experience = create :experience
        put :update, {:id => experience.to_param, :v1_experience => valid_attributes}
        response.should redirect_to(experience)
      end
    end

    describe "with invalid params" do
      it "assigns the v1_experience as @v1_experience" do
        experience = create :experience
        # Trigger the behavior that occurs when invalid params are submitted
        V1::Experience.any_instance.stub(:save).and_return(false)
        put :update, {:id => experience.to_param, :v1_experience => {  }}
        assigns(:v1_experience).should eq(experience)
      end

      it "re-renders the 'edit' template" do
        experience = create :experience
        # Trigger the behavior that occurs when invalid params are submitted
        V1::Experience.any_instance.stub(:save).and_return(false)
        put :update, {:id => experience.to_param, :v1_experience => {  }}
        response.should render_template("edit")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested v1_experience" do
      experience = create :experience
      expect {
        delete :destroy, {:id => experience.to_param}
      }.to change(V1::Experience, :count).by(-1)
    end

    it "redirects to the v1_experiences list" do
      experience = create :experience
      delete :destroy, {:id => experience.to_param}
      response.should redirect_to(v1_experiences_url)
    end
  end
end
